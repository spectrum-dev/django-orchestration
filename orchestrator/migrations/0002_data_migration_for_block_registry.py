# Generated by Django 3.2 on 2021-04-15 13:23

from django.db import migrations

def seed_blocks_into_registry(apps, schema_editor):
    BlockRegistry = apps.get_model('orchestrator', 'BlockRegistry')

    BlockRegistry(
        block_type="DATA_BLOCK",
        block_id=1,
        block_name="Raw Data",
        inputs=[{"fieldData": {"base": "/equityTypes", "method": "GET"}, "fieldName": "Equity Type", "fieldType": "dropdown", "fieldVariableName": "equityType"}, {"fieldData": {"base": "/regions", "method": "GET"}, "fieldName": "Region", "fieldType": "dropdown", "fieldVariableName": "region"}, {"fieldData": {"base": "/equityNames", "method": "GET"}, "fieldName": "Equity Name", "fieldType": "dropdown", "fieldVariableName": "equityName"}, {"fieldData": {"base": "/dataTypes", "method": "GET"}, "fieldName": "Data Type", "fieldType": "dropdown", "fieldVariableName": "dataType"}, {"fieldData": {"base": "/intervals", "method": "GET"}, "fieldName": "Interval", "fieldType": "dropdown", "fieldVariableName": "interval"}, {"fieldData": {"base": "/outputSizes", "method": "GET"}, "fieldName": "Output Size", "fieldType": "dropdown", "fieldVariableName": "outputSize"}, {"fieldName": "Start Date", "fieldType": "input", "fieldVariableName": "startDate"}, {"fieldName": "End Date", "fieldType": "input", "fieldVariableName": "endDate"}],
        validations={"required": [], "allowed_blocks": []}
    ).save()

    BlockRegistry(
        block_type="COMPUTATIONAL_BLOCK",
        block_id=1,
        block_name="Technical Analysis",
        inputs=[{"fieldData": {"base": "/indicatorNames", "method": "GET", "onChange": "indicatorFields?indicatorName="}, "fieldName": "Indicator Name", "fieldType": "dropdown", "fieldVariableName": "indicatorName"}],
        validations={"required": [{"blockType": "DATA_BLOCK", "number": 1}], "allowed_blocks": [{"blockId": "1", "blockType": "DATA_BLOCK"}]}
    ).save()

    BlockRegistry(
        block_type="SIGNAL_BLOCK",
        block_id=1,
        block_name="Event",
        inputs=[],
        validations={"required": [{"blockType": "COMPUTATIONAL_BLOCK", "number": 2}], "allowed_blocks": [{"blockId": "1", "blockType": "COMPUTATIONAL_BLOCK"}]}
    ).save()

    # {
    #     "input": {
    #         "eventType": "Intersect"
    #     },
    #     "output": {
    #         "COMPUTATION_BLOCK-1-2":[],
    #         "COMPUTATION_BLOCK-1-3":[]
    #     },
    #     "metadata":{"keys":["COMPUTATION_BLOCK-1-2", "COMPUTATION_BLOCK-1-3"]}
    # }
    
    BlockRegistry(
        block_type="STRATEGY_BLOCK",
        block_id=1,
        block_name="Backtest",
        inputs=[],
        validations={"required": [{"blockType": "DATA_BLOCK", "number": 1}, {"blockType": "SIGNAL_BLOCK", "number": 1}], "allowed_blocks": [{"blockId": "1", "blockType": "SIGNAL_BLOCK"}, {"blockId": "1", "blockType": "DATA_BLOCK"}]}
    ).save()

    # {
    #     "input": {
    #         "strategyType": "Backtest"
    #     },
    #     "output": {
    #         "DATA_BLOCK-1-1":[],
    #         "SIGNAL_BLOCK-1-4":[]
    #     },
    #     "metadata":{"keys":["COMPUTATION_BLOCK-1-2", "COMPUTATION_BLOCK-1-3"]}
    # }

def reverse_blocks_into_registry(apps, schema_editor):
    BlockRegistry = apps.get_model('orchestrator', 'BlockRegistry')
    BlockRegistry.objects.all().delete()

class Migration(migrations.Migration):

    dependencies = [
        ('orchestrator', '0001_block_registry'),
    ]

    operations = [
        migrations.RunPython(seed_blocks_into_registry, reverse_code=reverse_blocks_into_registry)
    ]
